페이징 / 검색 구현

페이징 확인을 위해 board test 더미 생성
 1. 프로젝트 > properties > classpath > add Library > Junit4
 2. src/test/java >com.myweb.www / BoardTest.class 생성
 3. 더미 data 생성 구문 작성
 4. 실행 시 class 안에서 run as 를 해야함 !!
	=> 해당하는 Test case 만 실행해야 하기 때문에
	=> 여러 method가 존재시 실행할려는 method만 실행하면 됨
===============
 Paging
 - list의 내용을 10개씩 끊어서 출력
 - select * from board order by bno desc limit 0,10;
 limit 시작번지,개수
 < 1 2 3 4 5 6 7 8 9 10 >
 1 => limit 0,10 => ( pageNo - 1 ) * 10
 2 => limit 10,10 => (2-1) * 10
 3 => limit 20,10 => (3-1) * 10
 4 => limit 30,10 => (4-1) * 10

=====================
 domain에 PagingVO 및 PagingHandler 생성
 페이징네이션 과 검색 구현

페이징네이션은 PagingVO 와 PagingHandler 참고

			검색 구현
 	// type의 값을 배열로 생성
	// 복합타입의 키워드일 경우 각자 검색해야하기 때문에 배열로 생성
	// this.type.split("") 한 글자씩 분리해서 인식
	public String[] getTypeToArray() {
		return this.type == null ? new String[] {} : this.type.split("");
	}
=====================
comment DB 생성

create table comment(
cno bigint auto_increment,
bno bigint not null,
writer varchar(100) not null,
content text not null,
reg_at datetime default now(),
mod_at datetime default now(),
primary key(cno)
);

	// ResponseEntity 객체 사용 : body내용 + httpStatus 상태
	// @RequestBody : body의 값을 추출하는 역할
	// consumes : 가져오는 데이터의 형태
	// produces : 보내느 데이터의 형식 / 나가는 데이터 타입 : MediaType
	// 자주 다루는 데이터는
	// json : application/json / text : text_plain

comment.js 생성
// 비동기 통신 구문
// async function
// 목적지 경로 : const url
// post : 데이터 삽입
        // get : 데이터 조회 => 생략가능
        // put (patch) : 수정
        // delete : 삭제
// header 는 객체로 받아야 함
// resp 가 destPage 라고 생각하면 됨