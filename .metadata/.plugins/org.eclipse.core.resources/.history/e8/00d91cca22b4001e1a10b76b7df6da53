package com.myweb.www.service;

import java.util.List;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.myweb.www.repository.MemberDAO;
import com.myweb.www.security.AuthVO;
import com.myweb.www.security.MemberVO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class MemberServiceImpl implements MemberService{

	private final MemberDAO mdao;
	
	BCryptPasswordEncoder passwordEncoder; // 암호화
	
	@Transactional
	@Override
	public int register(MemberVO mvo) {
		log.info("member register in");
		
		int isOk = mdao.insert(mvo);

		return mdao.insertAuthInit(mvo.getEmail());
	}

	@Override
	public boolean updateLastLogin(String authEmail) {
		
		return mdao.updateLastLogin(authEmail) > 0 ? true : false;
	}
	
	// MemberVO 는 항상 authList 를 포함하고 있다!
	@Override
	public MemberVO detail(String email) {
		MemberVO mvo = mdao.selectEmail(email);
		List<AuthVO> authList = mdao.selectAuth(email);
		mvo.setAuthList(authList);
		return mvo;
	}

	@Override
	public List<MemberVO> getlist() {
		log.info("getlist ServiceImpl check");
		List<MemberVO> list = mdao.selectAllList();
		for(MemberVO mvo : list) {
			mvo.setAuthList(mdao.selectAuth(mvo.getEmail()));
		}
		return list;
	}

	@Override
	public void noUpdatePw(MemberVO mvo) {
		// 비밀번호 업데이트 X
		
	}

	@Override
	public void updatePw(MemberVO mvo) {
		// 비밀번호 업데이트
		
	}

}
