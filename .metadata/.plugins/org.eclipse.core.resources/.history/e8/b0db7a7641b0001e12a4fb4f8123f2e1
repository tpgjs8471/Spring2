package com.myweb.www.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/board/*")
@Slf4j
@RequiredArgsConstructor
public class BoardController {
	
	// @RequiredArgsConstructor 선언 후
	// private final 로 객체 등룍 => 생성자 주입 : @inject 대신
	private final BoardService bsv;
	
	private final FileHandler fh;
	
	@GetMapping("/register")
	public void register() {}
	
	// 2024 -01-10 fileupload 수정
	// @RequestParam(name="files", required = false)MultipartFile[] files
	@PostMapping("/register")
	public String insert(BoardVO bvo, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>>>>>>>>>> bvo {}", bvo);
		List<FileVO> flist = null;
		
		// fileHandler 생성 multipartfule 들어가게되면 flist 가 아웃풋 되게 설정
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		
		int isOk = bsv.insert(new BoardDTO(bvo,flist));
		return "index";
	}
	
	@GetMapping("/list")
	public void list(Model m, PagingVO pgvo) {
		log.info(">>>>> PagingVO >>> {}"+pgvo);
		// 페이징 처리
		List<BoardVO> list = bsv.getlist(pgvo);
		// totalCount 구하기
		int totalCount = bsv.getTotalCount(pgvo);
		PagingHandler ph = new PagingHandler(pgvo,totalCount);
		
		m.addAttribute("list",list);
		m.addAttribute("ph",ph);
	}
	
	@GetMapping({"/detail","/modify"})
	public void detail(@RequestParam("bno") long bno,Model m) {
		log.info(">>>>>> detail bno {}", bno);

		m.addAttribute("bdto",bsv.getdetail(bno));
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO bvo, RedirectAttributes re,
			@RequestParam(name="files", required = false) MultipartFile[] files) {
		log.info(">>>>>> 수정할 bvo >>>>> {}", bvo);
		
		List<FileVO> flist = null;
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		BoardDTO bdto = new BoardDTO(bvo,flist);
		bsv.update(bdto);
		
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno") long bno) {
		
		log.info("삭제할 bno >>>>>>>>>>>> {}"+bno);
		int isOk = bsv.delete(bno);
		return "redirect:/board/list";
	}
	
	@DeleteMapping(value="/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFile(@PathVariable("uuid") String uuid){
		log.info(">>>>>>> uuid >>>>>>>>{}", uuid);
		int isOk = bsv.removeFile(uuid);
		return (isOk>0) ? new ResponseEntity<String>("1",HttpStatus.OK) :
				new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
