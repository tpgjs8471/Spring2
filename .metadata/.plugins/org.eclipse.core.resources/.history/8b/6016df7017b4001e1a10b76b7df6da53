package com.myweb.www.controller;

import java.security.Principal;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.security.MemberVO;
import com.myweb.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/member/*")
@RequiredArgsConstructor
public class MemberController {
	
	private final MemberService msv;
	private final BCryptPasswordEncoder bcEncoder;

	@GetMapping("/register")
	public void register() {} // register 로 페이지 이동
	@GetMapping("/login")
	public void login() {} // login 페이지 이동
	
	@PostMapping("/register")
	public String register(MemberVO mvo) {
		
		mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		log.info("register >>>>>>>>>> mvo >>>>>> {}", mvo);		
		int isOk = msv.register(mvo);
		
		return "index";
	}
	
	@PostMapping("/login")
	public String login(HttpServletRequest request, RedirectAttributes re) {
		// 로그인 실패시 다시 로그인 페이지로 돌아와 오류 메시지 전송
		// 다시 로그인 유도
		re.addAttribute("email",request.getAttribute("email"));
		re.addAttribute("errMsg",request.getAttribute("errMsg"));
		return "redirect:/member/login";
	}
	
	// @RequestParam("email"String email : 쿼리스트링으로 보내면(파라미터 받기) email 값을 받을 수 있음	
	@GetMapping("/modify")
	public void modify(Principal p,Model m) {
		log.info(">>>>> principal >>>> email >>>>"+p.getName());
		String email = p.getName();
		m.addAttribute("mvo",msv.detail(email));
	}
	
	@PostMapping("/modify")
	public String modify(MemberVO mvo, HttpServletRequest request,
			HttpServletResponse response) {
		if(mvo.getPwd().isEmpty()) {
			// 비밀번호 수정을 안한 경우 / 비번없는 업데이트 진행
		} else {
			// 비밀번호를 다시 인코딩하여 업데이트 진행
			String setPw = mvo.getPwd();
			Strint encodePw = bcEncoder.encode(setPw);
		}
		// 로그아웃 진행
		// 현재 로그인 되어있는 Authentication
		Authentication authentication = SecurityContextHolder
											.getContext()
											.getAuthentication();
		log.info(">>>>>> Authentication >>>>>"+authentication);
		new SecurityContextLogoutHandler().logout(request, response, authentication);
		
		return "/member/login";
	}
	
	@GetMapping("/list")
	public void memberlist(Model m) {
		
		m.addAttribute("memlist",msv.getlist());
	}
	
}
